#include "stdafx.h"
	#include <conio.h>
	#include <iostream>
	#include <string.h>
	#include <math.h>
	using namespace std;
	#define N 30
	#define M 30
	 
	void cargar(int mat[N][M], int n, int m){
		int i,j;
		for(i=0;i<n;i++){
			for(j=0;j<m;j++){
				cout<<"Introduzca elemento para mat["<<i<<"]["<<j<<"]: ";
				cin>>mat[i][j];
			}
		}
	}
	

	void mostrar(int mat[N][M], int n, int m){
		int i,j;
		for(i=0;i<n;i++){
			for(j=0;j<m;j++){
				cout<<mat[i][j]<<" ";
					}
			cout<<endl;
		}
		cout<<endl;
	}
	

	//1.- Matriz transpuesta
	void transponer (int A[N][M], int n, int m){
		int i,j, aux;
		for(i=0; i<n-1; i++){
			for(j=i+1; j<m; j++){\
				if(j>i){
				aux=A[i][j];
				A[i][j]=A[j][i];
				A[j][i]= aux;
				}}
		}
	}
	

	//3.- suma de dos matrices y almacenarlos en una tercera
	void sumarMatrices (int A [N][M], int B [N][M], int n, int m, int C[N][M]){
		int i,j;
		for(i=0; i<n; i++){
			for(j=0; j<m ; j++){
				C[i][j]= A[i][j]+B[i][j];
			}
		}
	}
	

	//4.-Multiplicacion de matrices
	

	void multiplicarMatrices(int A[N][M], int n1,int m1, int B[N][M],int n2, int m2, int C[N][M], int &n3, int &m3){
		int i,j,k,acum=0;
		for(i=0; i<n1; i++){
			for(j=0; j<m2; j++){
				acum=0;
				for (k=0; k<m1 ;k++){
					acum=acum + (A[i][j]*B[i][j]);
				}
				C[i][j]=acum;
			}
		}
	

			n3=n1;
			m3=m2;}
	

	bool matrizmagica(int mat[N][M],int n)
	{	int s=0,aux=0;
	bool k;
		for(int i=0;i<n;i++)
		{
			s=s+mat[0][i];
		}
		for(int i=0;i<n;i++)
		{
			aux=0;
			for(int j=0;j<n;j++)
			{
				aux=aux+mat[i][j];
			}
			if(aux!=s)
			{
				k= false;
			}
		}
		for(int i=0;i<n;i++)
		{
			aux=0;
			for(int j=0;j<n;j++)
			{
				aux=aux+mat[j][i];
			}
			if(aux!=s)
			{
				k=false;
			}
		}
		aux=0;
		for(int i=0;i<n;i++)
		{
			aux=aux+mat[i][i];
		}
		if(aux!=s)
		{
			k= false;
		}
		else 
		{
			k = true;
		}
		
		return(k);
	}
	

	

	void cargarEspiral (int mat[N][M],int n,int m){
	int a,i,c=1;
		a=0;
		for(a=0;a<n/2;a++){
			for(i=a;i<n-a;i++){
				mat[a][i]=c++;
			}
			for(i=a+1;i<n-a;i++){
				mat[i][n-a-1]=c++;
			}
			for(i=n-a-2;i>=a;i--){
				mat[n-a-1][i]=c++;
			}
			for(i=n-a-2;i>a;i--){
				mat[i][a]=c++;
			}
		}
		if(n%2!=0)
			mat[(n-1)/2][(n-1)/2]=c;
	}
	

	

	int main(){
	int n1,m1,n2,m2,mat1[N][M],mat2[N][M],c[N][M],n3=0,m3=0,opcion,n,m, I[N][M],T[N][M],d;
		cout<<"Numero de filas para matriz A: ";
		cin>>n1;
		cout<<endl<<"Numero de columnas para matriz A: ";
		cin>>m1;
		cout<<endl<<"Nro de filas para Matriz B:  ";
		cin>>n2;
	cout<<endl<<"Nro de columnas para Matriz B:  ";
		cin>>m2;
			do{
			cout<<endl<<endl<<"**************M E N U ****************";
			cout<<endl<<endl<<"1.-Cargar.";
			cout<<endl<<"2.-Mostrar.";
			cout<<endl<<"3.-Matriz transpuesta.";
			cout<<endl<<"4.-Suma de matrices";
			cout<<endl<<"5.-Multiplicacion de matrices";
			cout<<endl<<"6.-Cargar una matriz de cuadrada de forma circular con los primeros numeros naturales.";
			cout<<endl<<"8.- Matriz invertida.";
			cout<<endl<<"7.-Verificar si una matriz es magica.";
			cout<<endl<<"9.-Cargar matriz por diagonales con los primeros numeros naturales.";
			cout<<endl<<"0.-Salir";
			cout<<endl<<endl<<"Seleccione su opcion.: 	";
			cin>>opcion;
			switch(opcion){
					case 1: cargar(mat1,n1,m1);
				cargar(mat2,n2,m2);
				break;
			case 2: mostrar(mat1,n1,m1);
				mostrar(mat2,n2,m2);
				break;
			case 3: transponer(mat1,n1,m1);
				mostrar(mat1,n1,m1);
				break;
			case 4: if(n1==n2 && m1==m2){
			sumarMatrices(mat1,mat2,n1,m1,c);
		}else{
			cout<< "No se puede sumar";
		}
					mostrar(c,n1,m1);
					break;
			case 5:	if(m1==n2){
		multiplicarMatrices(mat1,n1,m1,mat2,n2,m2,c,n3,m3);
	}
	else{
		cout<< "No se podra multiplicar";
	}
	mostrar(c,n1,m2);
	break;
			case 6: cout<<"Nro filas matriz cuadrada: ";
						cin>>n;
				cout<<"Nro columnas matriz cuadrada: ";
				cin>>m;
				cargarEspiral(mat1,n,m);
				mostrar(mat1,n,m);
				break;
			case 7: cout<<endl<<"Saldra 0 si no es magica y 1 si es magica."<<endl<<endl;
				cargar(mat1,n1,m1);
				d=matrizmagica(mat1,n1);
				cout<<endl<<endl<<"Respuesta: "<<d;
				break;
									}
		}while(opcion!=0);
		getch();
		return(1);
	}
	

	Secuencias – Series -Sucesiones
	#include <iostream>
	#include <conio.h>
	#include <string.h>
	#include <math.h>
	using namespace std;
	#define N 30
	#define M 30
	

	void cargarSerie1(int mat[N][M],int n,int m){
		int i,j,k=3;
		for(i=0;i<n;i++){
			for(j=0;j<m;j++){
				mat[i][j]=k;
				k=k+3;
			}
			cout<<endl;
		}
	}
	

	int invertirNum(int Num){
		int inv=0;
			while (Num != 0){
				inv = inv * 10;
				inv = inv + Num % 10;
				Num = Num / 10;
		}
		return(inv);
	}
	

	void cargarSerie2(int mat[N][M], int n, int m){
		int i,j,d,c=1;
		for(i=0;i<n;i++){
			for(j=0;j<m;j++){
				d=powf(c,2);
				c++;
				mat[i][j]=invertirNum(d);
			}
		}
	}
	

	int sumaDig(int n){
		int d,s=0;
		while(n>0){
			d=n%10;
			n=n/10;
			s=s+d;
		}
		return(s);
	}
	

	

	void cargarSerie3(int mat[N][M], int n, int m){
		int i,j,d=1,Num=0;
		for(i=0;i<n;i++){
			for(j=0;j<m;j++){
				Num=Num+d;
			d=sumaDig(Num);
			mat[i][j]=Num;
				}
		}
	}
	

	void cargarSerie4(int mat[N][M], int n, int m){
		int i,j,d=1,Num=0;
		for(i=0;I<n;i++){
			for(j=0;j<m;j++){
				Num=Num+d;
			d=sumaDig(Num);
			mat[i][j]=d;
			}
		}
	}
	

	void mostrar(int mat[N][M], int n, int m){
		int i,j;
		for(i=0;i<n;i++){
			for(j=0;j<m;j++){
				cout<<mat[i][j]<<" ";
			}
			cout<<endl;
		}
	}
	

	int main(){
		int n,m,opcion,mat[N][M];
		cout<<endl<<"Numero de filas: ";
		cin>>n;
		cout<<endl<<"Nro de columnas: ";
		cin>>m;
		do{
			cout<<endl<<endl<<"********************M E N U**********************";
			cout<<endl<<endl<<"1.-Serie 1.";
			cout<<endl<<"2.-Serie 2.";
			cout<<endl<<"3.-Serie 3.";
			cout<<endl<<"4.-Serie 4.";
			cout<<endl<<"0.-Salir.";
			cout<<endl<<endl<<"Elija su opcion:  ";
			cin>>opcion;
			switch(opcion){
			case 1: cargarSerie1(mat,n,m);
				mostrar(mat,n,m);
				break;
			case 2: cargarSerie2(mat,n,m);
				mostrar(mat,n,m);
				break;
			case 3: cargarSerie3(mat,n,m);
				mostrar(mat,n,m);
				break;
			case 4: cargarSerie4(mat,n,m);
				mostrar(mat,n,m);
				break;
			}
				}while(opcion!=0);
		getch();
		return(1);
	}
	

	Array de arrays
	#include <iostream>
	#include <conio.h>
	#include <string.h>
	#include <math.h>
	using namespace std;
	#define fil 30
	#define col 30
	

	struct palabra
	{char cad[30];
	};
	

	struct vec
	{palabra v[30];
	};
	

	void ingresar_cadenas(vec v[], int n)
	{int i,j;
		for(i=0;i<n;i++)
			{for(j=0;j<n;j++)
				{cout<<"Ingrese palabra: ";
				cin>>v[i].v[j].cad;
				}
			}
	}
	

	void mostrar (vec v[], int n)
	{int i,j;
		for(i=0;i<n;i++)
			{for(j=0;j<n;j++)
				{cout<<v[i].v[j].cad;
				}
			}
	}
	

	void bolivia (vec M[fil][col], int n, vec v[])
	{int i,j,k=0,l, tam;
	char aux[30];
		for(i=0;i<n;i++)
				{for(j=0;j<n;j++)
				{tam= strlen(v[i].v[j].cad);
					for(k=0;k<tam;k++)
						{strcpy(aux,v[i].v[j].cad);
						}aux[tam]='\0';
					for(l=0;l<n;l++)
						{strcpy(M[i][j].v[l].cad,aux);
						}
				}
			}
	}
	

	void mostrar2(vec M[fil][col], int n, vec v[])
	{int i,j,l;
		for(i=0;i<n;i++)
			{for(j=0;j<n;j++)
				{for(l=0;l<n;l++)
					{cout<<M[i][j].v[l].cad;
				}cout<<endl;
			}
		}
	}
	

	

	int main()
	{int n;
	palabra V[30];
	vec v[30];
	vec M[fil][col];
	

	cout<<"Ingrese cantidad de filas=columnas: ";
	cin>>n;
	

	ingresar_cadenas(v,n);
	mostrar(v,n);
	bolivia(M,n,v);
	mostrar2(M,n,v);
	

	getch();
	return(1);
	}
	

	// Matriz de matriz
	#include <iostream>
	#include <conio.h>
	#include <string.h>
	#include <math.h>
	using namespace std;
	#define fil 30
	#define col 30
	

	struct telemento
	{int mat[fil][col];
	};
	

	void llenar_auto(telemento M[fil][col], int n)
	{int i,j,k,l;
	srand(time(NULL)); // Genera los números randomicamente
		for(i=0;i<n;i++)
			{for(j=0;j<n;j++)
				{for(k=0;k<n;k++)
					{for(l=0;l<n;l++)
					// Referencia a la matriz dentro de la matriz
						{M[i][j].mat[k][l]=rand() %10;
						}
					}
				}
		}
	}
	 
	void mostrar2 (telemento M[fil][col], int n)
	{int i, j,k,l;
		for(i=0;i<n;i++)
			{for(j=0;j<n;j++)
				{for(k=0;k<n;k++)
					{for(l=0;l<n;l++)
						{cout<<M[i][j].mat[k][l]<<" ";
						}cout<<endl;
					}cout<<endl;
				}cout<<endl;
			}cout<<endl;
	}
	

	

	void cambio_dp(int M[fil][col], int n)
	{int i, aux;
		for(i=0;i<n/2;i++)
			{aux= M[i][i];
			M[i][i]= M[n-1-i][n-1-i];
			M[n-1-i][n-1-i]= aux;
			}
	}
	

	void cambio_ds(int M[fil][col], int n)
	{int i, aux;
		for(i=0;i<n/2;i++)
			{aux=M[i][n-1-i];
			M[i][n-1-i]=M[n-1-i][i];
			M[n-1-i][i]=aux;
			}
	}
	

	void cambio (int A[fil][col], int n, int B[fil][col])
	{int i, j, aux;
		for(i=0;i<n/2;i++)
			{for(j=0;j<n/2;j++)
				{aux=A[i][j];
				A[i][j]=B[i][j];
				B[i][j]=aux;
				}
			}
	}
	

	void intercambio(telemento M[fil][col], int n)
	{int i, j;
		for(i=0;i<n/2;i++)
			{cambio(M[i][i].mat,n, M[n-1-i][n-1-i].mat);
				}for(i=0;i<n/2;i++)
					{cambio(M[n-1-i][i].mat,n, M[i][n-1-i].mat);
					}
				for(i=0;i<n/2;i++)
				{cambio_dp(M[i][i].mat,n);
				cambio_ds(M[	n-i-1][i].mat,n);
				}
	}
	

	void mostrar(telemento M[fil][col], int n)
	{int i, j,k,l;
		for(i=0;i<n;i++)
			{for(j=0;j<n;j++)
				{for(k=0;k<n;k++)
					{for(l=0;l<n;l++)
						{cout<<M[i][j].mat[k][l]<<" ";
						}cout<<endl;
					}cout<<endl;
				}cout<<endl;
			}cout<<endl;
	}
	

	int main()
	{int n;
	telemento M[fil][col];
	

	cout<<"Ingrese cantidad de filas=columnas: ";
	cin>>n;
	

	llenar_auto(M,n);
	mostrar2(M,n);
	intercambio(M,n);
	mostrar(M,n);
	

	getch();
	return(1);\
	}







 
 
 
